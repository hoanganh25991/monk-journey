/**
 * Diablo Immortal PWA Service Worker
 * Auto-generated by update-service-worker.js
 * Enhanced with detailed progress reporting
 */

const CACHE_NAME = 'monk-journey-cache';
const CACHE_VERSION = '21'; // Incremented version to force update
const CACHE_KEY = CACHE_NAME + '-v' + CACHE_VERSION;

// Total cache size in bytes and MB
const TOTAL_CACHE_SIZE_BYTES = 10385771;
const TOTAL_CACHE_SIZE_MB = 9.90;

// Communication channel
let messagePort = null;

// Assets to cache - organized by type for better progress reporting
const ASSETS_TO_CACHE = [
  '',
  'index.html',
  'manifest.json',
  'css/animations.css',
  'css/core/game.css',
  'css/core/hud-manager.css',
  'css/core/menu-system.css',
  'css/layout.css',
  'css/main.css',
  'css/mobile.css',
  'css/reset.css',
  'css/utilities.css',
  'js/config/index.js',
  'js/config/player-models.js',
  'js/config/skills.js',
  'js/core/AudioManager.js',
  'js/core/CollisionManager.js',
  'js/core/DifficultyManager.js',
  'js/core/InputHandler.js',
  'js/core/PerformanceManager.js',
  'js/core/QuestManager.js',
  'js/core/UIComponent.js',
  'js/core/game/Game.js',
  'js/core/game/GameEvents.js',
  'js/core/game/GameState.js',
  'js/core/game/LoadingManager.js',
  'js/core/game/SceneOptimizer.js',
  'js/core/hud-manager/DeathScreenUI.js',
  'js/core/hud-manager/DialogUI.js',
  'js/core/hud-manager/EffectsManager.js',
  'js/core/hud-manager/EnemyUI.js',
  'js/core/hud-manager/HUDManager.js',
  'js/core/hud-manager/HomeButton.js',
  'js/core/hud-manager/InventoryUI.js',
  'js/core/hud-manager/MiniMapUI.js',
  'js/core/hud-manager/NotificationsUI.js',
  'js/core/hud-manager/PlayerUI.js',
  'js/core/hud-manager/QuestLogUI.js',
  'js/core/hud-manager/SkillsUI.js',
  'js/core/hud-manager/VirtualJoystickUI.js',
  'js/core/menu-system/GameMenu.js',
  'js/core/menu-system/LoadingScreen.js',
  'js/core/menu-system/MainBackground.js',
  'js/core/menu-system/ModelPreview.js',
  'js/core/menu-system/SettingsMenu.js',
  'js/core/save-manager/ISaveSystem.js',
  'js/core/save-manager/IStorageAdapter.js',
  'js/core/save-manager/LocalStorageAdapter.js',
  'js/core/save-manager/SaveManager.js',
  'js/core/save-manager/serializers/PlayerSerializer.js',
  'js/core/save-manager/serializers/QuestSerializer.js',
  'js/core/save-manager/serializers/SettingsSerializer.js',
  'js/core/save-manager/serializers/WorldSerializer.js',
  'js/core/save-manager/utils/SaveOperationProgress.js',
  'js/core/save-manager/utils/SaveUtils.js',
  'js/entities/Enemy.js',
  'js/entities/EnemyManager.js',
  'js/entities/player/FallbackPlayerModel.js',
  'js/entities/player/Player.js',
  'js/entities/player/PlayerCombat.js',
  'js/entities/player/PlayerInterface.js',
  'js/entities/player/PlayerInventory.js',
  'js/entities/player/PlayerModel.js',
  'js/entities/player/PlayerMovement.js',
  'js/entities/player/PlayerSkills.js',
  'js/entities/player/PlayerState.js',
  'js/entities/player/PlayerStats.js',
  'js/entities/skills/CycloneStrikeEffect.js',
  'js/entities/skills/ExplodingPalmEffect.js',
  'js/entities/skills/FistOfThunderEffect.js',
  'js/entities/skills/InnerSanctuaryEffect.js',
  'js/entities/skills/MysticAllyEffect.js',
  'js/entities/skills/SevenSidedStrikeEffect.js',
  'js/entities/skills/Skill.js',
  'js/entities/skills/SkillEffect.js',
  'js/entities/skills/SkillEffectFactory.js',
  'js/entities/skills/TeleportSkillEffect.js',
  'js/entities/skills/WaveOfLightEffect.js',
  'js/entities/skills/WaveStrikeEffect.js',
  'js/main.js',
  'js/utils/AnimationUtils.js',
  'js/world/WorldManager.js',
  'js/world/environment/Bush.js',
  'js/world/environment/EnvironmentManager.js',
  'js/world/environment/Flower.js',
  'js/world/environment/Rock.js',
  'js/world/environment/Tree.js',
  'js/world/interactive/BossSpawnPoint.js',
  'js/world/interactive/InteractiveObjectManager.js',
  'js/world/interactive/QuestMarker.js',
  'js/world/interactive/TreasureChest.js',
  'js/world/lighting/LightingManager.js',
  'js/world/structures/Building.js',
  'js/world/structures/DarkSanctum.js',
  'js/world/structures/Ruins.js',
  'js/world/structures/StructureManager.js',
  'js/world/structures/Tower.js',
  'js/world/terrain/TerrainChunk.js',
  'js/world/terrain/TerrainManager.js',
  'js/world/utils/RandomGenerator.js',
  'js/world/utils/TextureGenerator.js',
  'js/world/zones/ZoneManager.js',
  'images/logo-192.png',
  'images/logo-192.svg',
  'images/logo-512.png',
  'images/logo-512.svg',
  'assets/audio/ally_dismiss.mp3',
  'assets/audio/ally_summon.mp3',
  'assets/audio/attack.mp3',
  'assets/audio/barrier_dissipate.mp3',
  'assets/audio/barrier_form.mp3',
  'assets/audio/battle_theme.mp3',
  'assets/audio/bell_fade.mp3',
  'assets/audio/bell_ring.mp3',
  'assets/audio/boss_death.mp3',
  'assets/audio/boss_theme.mp3',
  'assets/audio/button_click.mp3',
  'assets/audio/chest_open.mp3',
  'assets/audio/cyclone_strike.mp3',
  'assets/audio/door_open.mp3',
  'assets/audio/enemy_attack.mp3',
  'assets/audio/enemy_death.mp3',
  'assets/audio/enemy_hit.mp3',
  'assets/audio/exploding_palm.mp3',
  'assets/audio/fist_of_thunder.mp3',
  'assets/audio/inner_sanctuary.mp3',
  'assets/audio/inventory_open.mp3',
  'assets/audio/item_pickup.mp3',
  'assets/audio/level_up.mp3',
  'assets/audio/main_theme.mp3',
  'assets/audio/mark_applied.mp3',
  'assets/audio/massive_explosion.mp3',
  'assets/audio/mystic_ally.mp3',
  'assets/audio/player_death.mp3',
  'assets/audio/player_hit.mp3',
  'assets/audio/rapid_strike.mp3',
  'assets/audio/seven_sided_strike.mp3',
  'assets/audio/strike_complete.mp3',
  'assets/audio/thunder_echo.mp3',
  'assets/audio/thunder_strike.mp3',
  'assets/audio/water_dissipate.mp3',
  'assets/audio/water_impact.mp3',
  'assets/audio/wave_of_light.mp3',
  'assets/audio/wave_strike.mp3',
  'assets/audio/wind_dissipate.mp3',
  'assets/audio/wind_pull.mp3',
  'assets/images/background.jpg',
  'assets/models/monk-v3.glb',
  'assets/models/monk.glb',
  'assets/models/songoku.glb',
  'pwa/orientation-lock.js',
  'pwa/registration.js'
];

// File sizes in bytes for progress reporting
const FILE_SIZES =   {
    "": 15430,
    "index.html": 15430,
    "manifest.json": 571,
    "css/animations.css": 1036,
    "css/core/game.css": 0,
    "css/core/hud-manager.css": 11738,
    "css/core/menu-system.css": 10671,
    "css/layout.css": 3723,
    "css/main.css": 614,
    "css/mobile.css": 1620,
    "css/reset.css": 1275,
    "css/utilities.css": 2433,
    "js/config/index.js": 62,
    "js/config/player-models.js": 2270,
    "js/config/skills.js": 5190,
    "js/core/AudioManager.js": 32107,
    "js/core/CollisionManager.js": 12055,
    "js/core/DifficultyManager.js": 4858,
    "js/core/InputHandler.js": 23183,
    "js/core/PerformanceManager.js": 41903,
    "js/core/QuestManager.js": 18462,
    "js/core/UIComponent.js": 2518,
    "js/core/game/Game.js": 12568,
    "js/core/game/GameEvents.js": 1148,
    "js/core/game/GameState.js": 1314,
    "js/core/game/LoadingManager.js": 1599,
    "js/core/game/SceneOptimizer.js": 4562,
    "js/core/hud-manager/DeathScreenUI.js": 1852,
    "js/core/hud-manager/DialogUI.js": 1909,
    "js/core/hud-manager/EffectsManager.js": 7354,
    "js/core/hud-manager/EnemyUI.js": 1842,
    "js/core/hud-manager/HUDManager.js": 10661,
    "js/core/hud-manager/HomeButton.js": 3824,
    "js/core/hud-manager/InventoryUI.js": 4617,
    "js/core/hud-manager/MiniMapUI.js": 24436,
    "js/core/hud-manager/NotificationsUI.js": 21242,
    "js/core/hud-manager/PlayerUI.js": 3867,
    "js/core/hud-manager/QuestLogUI.js": 2709,
    "js/core/hud-manager/SkillsUI.js": 6330,
    "js/core/hud-manager/VirtualJoystickUI.js": 6983,
    "js/core/menu-system/GameMenu.js": 8911,
    "js/core/menu-system/LoadingScreen.js": 2106,
    "js/core/menu-system/MainBackground.js": 2851,
    "js/core/menu-system/ModelPreview.js": 16850,
    "js/core/menu-system/SettingsMenu.js": 33492,
    "js/core/save-manager/ISaveSystem.js": 1255,
    "js/core/save-manager/IStorageAdapter.js": 1060,
    "js/core/save-manager/LocalStorageAdapter.js": 1831,
    "js/core/save-manager/SaveManager.js": 28982,
    "js/core/save-manager/serializers/PlayerSerializer.js": 4899,
    "js/core/save-manager/serializers/QuestSerializer.js": 3781,
    "js/core/save-manager/serializers/SettingsSerializer.js": 3440,
    "js/core/save-manager/serializers/WorldSerializer.js": 14922,
    "js/core/save-manager/utils/SaveOperationProgress.js": 6226,
    "js/core/save-manager/utils/SaveUtils.js": 2284,
    "js/entities/Enemy.js": 61987,
    "js/entities/EnemyManager.js": 31074,
    "js/entities/player/FallbackPlayerModel.js": 5656,
    "js/entities/player/Player.js": 10707,
    "js/entities/player/PlayerCombat.js": 14371,
    "js/entities/player/PlayerInterface.js": 4386,
    "js/entities/player/PlayerInventory.js": 2993,
    "js/entities/player/PlayerModel.js": 55020,
    "js/entities/player/PlayerMovement.js": 8796,
    "js/entities/player/PlayerSkills.js": 16511,
    "js/entities/player/PlayerState.js": 1428,
    "js/entities/player/PlayerStats.js": 3245,
    "js/entities/skills/CycloneStrikeEffect.js": 14218,
    "js/entities/skills/ExplodingPalmEffect.js": 26265,
    "js/entities/skills/FistOfThunderEffect.js": 14665,
    "js/entities/skills/InnerSanctuaryEffect.js": 18464,
    "js/entities/skills/MysticAllyEffect.js": 22738,
    "js/entities/skills/SevenSidedStrikeEffect.js": 19501,
    "js/entities/skills/Skill.js": 9291,
    "js/entities/skills/SkillEffect.js": 3871,
    "js/entities/skills/SkillEffectFactory.js": 2861,
    "js/entities/skills/TeleportSkillEffect.js": 14179,
    "js/entities/skills/WaveOfLightEffect.js": 21304,
    "js/entities/skills/WaveStrikeEffect.js": 13273,
    "js/main.js": 1706,
    "js/utils/AnimationUtils.js": 10567,
    "js/world/WorldManager.js": 12437,
    "js/world/environment/Bush.js": 1849,
    "js/world/environment/EnvironmentManager.js": 17255,
    "js/world/environment/Flower.js": 4019,
    "js/world/environment/Rock.js": 1527,
    "js/world/environment/Tree.js": 2174,
    "js/world/interactive/BossSpawnPoint.js": 1470,
    "js/world/interactive/InteractiveObjectManager.js": 9077,
    "js/world/interactive/QuestMarker.js": 1847,
    "js/world/interactive/TreasureChest.js": 2264,
    "js/world/lighting/LightingManager.js": 4744,
    "js/world/structures/Building.js": 3744,
    "js/world/structures/DarkSanctum.js": 5009,
    "js/world/structures/Ruins.js": 5086,
    "js/world/structures/StructureManager.js": 12135,
    "js/world/structures/Tower.js": 4470,
    "js/world/terrain/TerrainChunk.js": 4063,
    "js/world/terrain/TerrainManager.js": 27961,
    "js/world/utils/RandomGenerator.js": 2214,
    "js/world/utils/TextureGenerator.js": 4292,
    "js/world/zones/ZoneManager.js": 5319,
    "images/logo-192.png": 15541,
    "images/logo-192.svg": 345,
    "images/logo-512.png": 62939,
    "images/logo-512.svg": 347,
    "assets/audio/ally_dismiss.mp3": 3456,
    "assets/audio/ally_summon.mp3": 2688,
    "assets/audio/attack.mp3": 2688,
    "assets/audio/barrier_dissipate.mp3": 4224,
    "assets/audio/barrier_form.mp3": 3456,
    "assets/audio/battle_theme.mp3": 40320,
    "assets/audio/bell_fade.mp3": 4224,
    "assets/audio/bell_ring.mp3": 5952,
    "assets/audio/boss_death.mp3": 5952,
    "assets/audio/boss_theme.mp3": 40320,
    "assets/audio/button_click.mp3": 1152,
    "assets/audio/chest_open.mp3": 2688,
    "assets/audio/cyclone_strike.mp3": 3456,
    "assets/audio/door_open.mp3": 3456,
    "assets/audio/enemy_attack.mp3": 1920,
    "assets/audio/enemy_death.mp3": 3456,
    "assets/audio/enemy_hit.mp3": 1152,
    "assets/audio/exploding_palm.mp3": 3456,
    "assets/audio/fist_of_thunder.mp3": 2688,
    "assets/audio/inner_sanctuary.mp3": 4992,
    "assets/audio/inventory_open.mp3": 1920,
    "assets/audio/item_pickup.mp3": 1920,
    "assets/audio/level_up.mp3": 3456,
    "assets/audio/main_theme.mp3": 585978,
    "assets/audio/mark_applied.mp3": 2688,
    "assets/audio/massive_explosion.mp3": 4992,
    "assets/audio/mystic_ally.mp3": 4224,
    "assets/audio/player_death.mp3": 4224,
    "assets/audio/player_hit.mp3": 1920,
    "assets/audio/rapid_strike.mp3": 1920,
    "assets/audio/seven_sided_strike.mp3": 4224,
    "assets/audio/strike_complete.mp3": 2688,
    "assets/audio/thunder_echo.mp3": 3456,
    "assets/audio/thunder_strike.mp3": 1920,
    "assets/audio/water_dissipate.mp3": 3456,
    "assets/audio/water_impact.mp3": 1920,
    "assets/audio/wave_of_light.mp3": 4992,
    "assets/audio/wave_strike.mp3": 2688,
    "assets/audio/wind_dissipate.mp3": 3456,
    "assets/audio/wind_pull.mp3": 2688,
    "assets/images/background.jpg": 465241,
    "pwa/orientation-lock.js": 525,
    "pwa/registration.js": 14078
  };

// Function to send progress updates to the client
function sendProgressUpdate(completed, total, currentFile, loadedBytes, totalBytes) {
  if (messagePort) {
    messagePort.postMessage({
      type: 'CACHE_PROGRESS',
      completed,
      total,
      currentFile,
      loadedBytes,
      totalBytes,
      totalSizeMB: TOTAL_CACHE_SIZE_MB
    });
  }
}

// Function to cache files with progress tracking
async function cacheFilesWithProgress(cache) {
  const total = ASSETS_TO_CACHE.length;
  let completed = 0;
  let loadedBytes = 0;
  
  // Process files sequentially to ensure accurate progress tracking
  for (const url of ASSETS_TO_CACHE) {
    try {
      // Send progress update before starting the fetch
      
      // Get file size (or 0 if not available)
      const fileSize = FILE_SIZES[url] || 0;
      
      // Send progress update before starting the fetch
      sendProgressUpdate(completed, total, url, loadedBytes, TOTAL_CACHE_SIZE_BYTES);
      
      // Fetch and cache the file
      const response = await fetch(url);
      if (response.ok) {
        await cache.put(url, response);
        completed++;
        loadedBytes += fileSize;
        
        // Send progress update after successful caching
        
        // Send progress update after successful caching
        sendProgressUpdate(completed, total, url, loadedBytes, TOTAL_CACHE_SIZE_BYTES);
      } else {
        console.warn(`Failed to cache ${url}: ${response.status} ${response.statusText}`);
        // Still increment completed to keep progress moving
        completed++;
        sendProgressUpdate(completed, total, `Failed: ${url}`, loadedBytes, TOTAL_CACHE_SIZE_BYTES);
      }
    } catch (error) {
      console.error(`Error caching ${url}:`, error);
      // Still increment completed to keep progress moving
      completed++;
      sendProgressUpdate(completed, total, `Error: ${url}`, loadedBytes, TOTAL_CACHE_SIZE_BYTES);
    }
  }
  
  return completed;
}

// Listen for messages from the client
self.addEventListener('message', event => {
  // Check if it's the initialization message with the port
  if (event.data && event.data.type === 'INIT_PORT') {
    messagePort = event.data.port;
    console.log('Communication channel established with client');
  }
});

// Install event - cache all static assets with progress tracking
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_KEY)
      .then(cache => {
        console.log('Caching app assets with progress tracking');
        console.log(`Total cache size: ${TOTAL_CACHE_SIZE_MB} MB with progress tracking`);
        return cacheFilesWithProgress(cache);
      })
      .then(completedCount => {
        console.log(`Cached ${completedCount} files successfully`);
        return self.skipWaiting();
      })
      .catch(error => {
        console.error('Failed to cache assets:', error);
      })
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.filter(cacheName => {
          return cacheName.startsWith(CACHE_NAME) && cacheName !== CACHE_KEY;
        }).map(cacheName => {
          console.log('Deleting old cache:', cacheName);
          return caches.delete(cacheName);
        })
      );
    }).then(() => {
      return self.clients.claim();
    })
  );
});

// Fetch event - serve from cache, fall back to network
self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        if (response) {
          return response;
        }
        return fetch(event.request);
      })
      .catch(error => {
        console.error('Fetch error:', error);
        // You could return a custom offline page here
      })
  );
});
