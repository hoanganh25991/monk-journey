/**
 * Diablo Immortal PWA Service Worker
 * Auto-generated by update-service-worker.js
 */

const CACHE_NAME = 'diablo-immortal-cache';
const CACHE_VERSION = '5';
const CACHE_KEY = CACHE_NAME + '-v' + CACHE_VERSION;

const ASSETS_TO_CACHE = [
  '',
  'index.html',
  'manifest.json',
  'css/style.css',
  'js/core/AudioManager.js',
  'js/core/CollisionManager.js',
  'js/core/DifficultyManager.js',
  'js/core/Game.js',
  'js/core/HUDManager.js',
  'js/core/InputHandler.js',
  'js/core/PerformanceManager.js',
  'js/core/QuestManager.js',
  'js/core/SaveManager.js',
  'js/entities/Enemy.js',
  'js/entities/EnemyManager.js',
  'js/entities/palyer/Player.js',
  'js/entities/Skill.js',
  'js/main.js',
  'js/world/WorldManager.js',
  'js/world/environment/Bush.js',
  'js/world/environment/EnvironmentManager.js',
  'js/world/environment/Flower.js',
  'js/world/environment/Rock.js',
  'js/world/environment/Tree.js',
  'js/world/interactive/BossSpawnPoint.js',
  'js/world/interactive/InteractiveObjectManager.js',
  'js/world/interactive/QuestMarker.js',
  'js/world/interactive/TreasureChest.js',
  'js/world/lighting/LightingManager.js',
  'js/world/structures/Building.js',
  'js/world/structures/DarkSanctum.js',
  'js/world/structures/Ruins.js',
  'js/world/structures/StructureManager.js',
  'js/world/structures/Tower.js',
  'js/world/terrain/TerrainChunk.js',
  'js/world/terrain/TerrainManager.js',
  'js/world/utils/RandomGenerator.js',
  'js/world/utils/TextureGenerator.js',
  'js/world/zones/ZoneManager.js',
  'images/logo-192.png',
  'images/logo-192.svg',
  'images/logo-512.png',
  'images/logo-512.svg',
  'assets/audio/attack.mp3',
  'assets/audio/battle_theme.mp3',
  'assets/audio/boss_death.mp3',
  'assets/audio/boss_theme.mp3',
  'assets/audio/button_click.mp3',
  'assets/audio/chest_open.mp3',
  'assets/audio/cyclone_strike.mp3',
  'assets/audio/door_open.mp3',
  'assets/audio/enemy_attack.mp3',
  'assets/audio/enemy_death.mp3',
  'assets/audio/enemy_hit.mp3',
  'assets/audio/exploding_palm.mp3',
  'assets/audio/fist_of_thunder.mp3',
  'assets/audio/inner_sanctuary.mp3',
  'assets/audio/inventory_open.mp3',
  'assets/audio/item_pickup.mp3',
  'assets/audio/level_up.mp3',
  'assets/audio/main_theme.mp3',
  'assets/audio/mystic_ally.mp3',
  'assets/audio/player_death.mp3',
  'assets/audio/player_hit.mp3',
  'assets/audio/seven_sided_strike.mp3',
  'assets/audio/wave_of_light.mp3',
  'assets/audio/wave_strike.mp3',
  'assets/images/background.jpg'
];

// Install event - cache all static assets
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_KEY)
      .then(cache => {
        console.log('Caching app assets');
        return cache.addAll(ASSETS_TO_CACHE);
      })
      .then(() => {
        return self.skipWaiting();
      })
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.filter(cacheName => {
          return cacheName.startsWith(CACHE_NAME) && cacheName !== CACHE_KEY;
        }).map(cacheName => {
          console.log('Deleting old cache:', cacheName);
          return caches.delete(cacheName);
        })
      );
    }).then(() => {
      return self.clients.claim();
    })
  );
});

// Fetch event - serve from cache, fall back to network
self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        if (response) {
          return response;
        }
        return fetch(event.request);
      })
  );
});
